@model IEnumerable<StudentManagementSystem.Models.Exam>
@{
    ViewData["Title"] = "T·∫•t c·∫£ b√†i ki·ªÉm tra";
}

@section Styles {
    <link href="~/css/admin-ui.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" />
}

<!-- Welcome Header with Animation -->
<div class="welcome-header mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div class="position-relative z-index-2">
            <h2 class="mb-2 animate__animated animate__fadeInLeft fw-bold">
                <i class="fas fa-file-alt me-2"></i>
                T·∫•t c·∫£ b√†i ki·ªÉm tra üìù
            </h2>
            <p class="mb-0 opacity-75">Xem v√† qu·∫£n l√Ω t·∫•t c·∫£ b√†i ki·ªÉm tra trong h·ªá th·ªëng</p>
        </div>
        <div class="text-end position-relative z-index-2">
            <div class="d-flex gap-2">
                <button class="btn btn-outline-light rounded-pill px-3" id="filterBtn">
                    <i class="fas fa-filter me-2"></i>L·ªçc
                </button>
                <button class="btn btn-outline-light rounded-pill px-3" id="exportBtn">
                    <i class="fas fa-download me-2"></i>Xu·∫•t
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Filter Panel -->
<div class="admin-action-card mb-4" id="filterPanel" style="display: none;">
    <div class="card-header">
        <h6 class="mb-0 fw-bold">
            <i class="fas fa-filter me-2"></i>B·ªô l·ªçc b√†i ki·ªÉm tra
        </h6>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Tr·∫°ng th√°i</label>
                <select class="form-select" id="statusFilter">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="active">ƒêang ho·∫°t ƒë·ªông</option>
                    <option value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Lo·∫°i b√†i thi</label>
                <select class="form-select" id="typeFilter">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="Gi·ªØa k·ª≥">Gi·ªØa k·ª≥</option>
                    <option value="Cu·ªëi k·ª≥">Cu·ªëi k·ª≥</option>
                    <option value="Th∆∞·ªùng xuy√™n">Th∆∞·ªùng xuy√™n</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">T√¨m ki·∫øm</label>
                <input type="text" class="form-control" id="examSearch" placeholder="T√¨m theo t√™n b√†i ki·ªÉm tra...">
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <button class="btn btn-primary-gradient w-100" id="applyFilter">
                    <i class="fas fa-search me-2"></i>√Åp d·ª•ng
                </button>
            </div>
        </div>
    </div>
</div>

<div class="admin-action-card animate__animated animate__fadeInUp">
    <div class="card-header">
        <h5 class="mb-0 fw-bold">
            <i class="fas fa-list me-2"></i> Danh s√°ch b√†i ki·ªÉm tra
        </h5>
    </div>
    <div class="card-body">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr style="background: linear-gradient(135deg, #a8e6cf, #7fcdcd); color: #2e7d32;">
                            <th class="border-0 fw-bold">T√™n b√†i ki·ªÉm tra</th>
                            <th class="border-0 fw-bold">M√¥ t·∫£</th>
                            <th class="border-0 fw-bold">Th·ªùi gian</th>
                            <th class="border-0 fw-bold">Lo·∫°i b√†i thi</th>
                            <th class="border-0 fw-bold">L·ªãch thi</th>
                            <th class="border-0 fw-bold">Ng∆∞·ªùi t·∫°o</th>
                            <th class="border-0 fw-bold">Ng√†y t·∫°o</th>
                            <th class="border-0 fw-bold text-center">Tr·∫°ng th√°i</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var exam in Model)
                        {
                            <tr class="animate__animated animate__fadeIn" style="animation-delay: @(Model.ToList().IndexOf(exam) * 0.1)s;">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-sm me-2">
                                            <div class="rounded-circle d-flex align-items-center justify-content-center"
                                                 style="width: 35px; height: 35px; background: linear-gradient(135deg, #89f7fe, #66a6ff);">
                                                <i class="fas fa-file-alt text-white"></i>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="fw-bold text-primary">@exam.Title</div>
                                            <small class="text-muted">B√†i ki·ªÉm tra</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(exam.Description))
                                    {
                                        <span class="text-muted" title="@exam.Description">
                                            @(exam.Description.Length > 50 ? exam.Description.Substring(0, 50) + "..." : exam.Description)
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted fst-italic">Kh√¥ng c√≥ m√¥ t·∫£</span>
                                    }
                                </td>
                                <td class="text-center">
                                    @if (exam.ExamSchedules.Any())
                                    {
                                        <span class="badge bg-info rounded-pill px-3">
                                            <i class="fas fa-clock me-1"></i>@exam.ExamSchedules.First().DurationMinutes ph√∫t
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Ch∆∞a c√≥ l·ªãch</span>
                                    }
                                </td>
                                <td class="text-center">
                                    <span class="badge bg-secondary rounded-pill px-3">
                                        <i class="fas fa-file me-1"></i>File b√†i thi
                                    </span>
                                </td>
                                <td class="text-center">
                                    @if (exam.ExamSchedules.Any())
                                    {
                                        var scheduleCount = exam.ExamSchedules.Count;
                                        var badgeColor = scheduleCount > 3 ? "success" : scheduleCount > 1 ? "primary" : "warning";
                                        <span class="badge bg-@badgeColor rounded-pill px-3">
                                            <i class="fas fa-calendar me-1"></i>@scheduleCount l·ªãch thi
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning rounded-pill px-3">
                                            <i class="fas fa-exclamation-triangle me-1"></i>Ch∆∞a c√≥ l·ªãch
                                        </span>
                                    }
                                </td>
                                <td>
                                    @if (exam.CreatedBy != null)
                                    {
                                        <div class="text-center">
                                            <div class="fw-bold">@exam.CreatedBy.FullName</div>
                                            <small class="text-muted">@exam.CreatedBy.EmployeeId</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center">
                                            <div class="text-muted">
                                                <i class="fas fa-robot me-1"></i>H·ªá th·ªëng
                                            </div>
                                        </div>
                                    }
                                </td>
                                <td class="text-center">
                                    <small class="text-muted">@exam.CreatedAt.ToString("dd/MM/yyyy")</small>
                                    <br><small class="text-muted">@exam.CreatedAt.ToString("HH:mm")</small>
                                </td>
                                <td class="text-center">
                                    @if (exam.IsActive)
                                    {
                                        <span class="badge bg-success rounded-pill px-3">
                                            <i class="fas fa-check-circle me-1"></i>Ho·∫°t ƒë·ªông
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary rounded-pill px-3">
                                            <i class="fas fa-pause-circle me-1"></i>Kh√¥ng ho·∫°t ƒë·ªông
                                        </span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <div class="empty-state">
                    <div class="empty-state-icon mb-4">
                        <i class="fas fa-file-alt fa-4x" style="color: #a8e6cf;"></i>
                    </div>
                    <h4 class="text-muted mb-3">Ch∆∞a c√≥ b√†i ki·ªÉm tra n√†o</h4>
                    <p class="text-muted mb-4">C√°c gi·∫£ng vi√™n ch∆∞a t·∫°o b√†i ki·ªÉm tra n√†o trong h·ªá th·ªëng</p>
                    <div class="text-muted">
                        <i class="fas fa-info-circle me-2"></i>
                        B√†i ki·ªÉm tra s·∫Ω ƒë∆∞·ª£c t·∫°o b·ªüi gi·∫£ng vi√™n
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Enhanced Statistics Cards -->
<div class="container-fluid px-0 mt-4">
    <div class="row g-3 justify-content-center mx-auto" style="max-width: 1000px;">
        <!-- Total Exams Card -->
        <div class="col-lg-3 col-md-6">
            <div class="stat-card-modern stat-card-exams">
                <div class="stat-card-content">
                    <div class="stat-icon-wrapper">
                        <div class="stat-icon-bg stat-icon-bg-teal">
                            <i class="fas fa-file-alt"></i>
                        </div>
                    </div>
                    <div class="stat-info">
                        <div class="stat-number">@Model.Count()</div>
                        <div class="stat-label">T·ªïng b√†i ki·ªÉm tra</div>
                        <div class="stat-description">T·∫•t c·∫£ b√†i ki·ªÉm tra</div>
                    </div>
                </div>
                <div class="stat-card-footer">
                    <span class="stat-link">Chi ti·∫øt <i class="fas fa-arrow-right ms-1"></i></span>
                </div>
            </div>
        </div>

        <!-- Active Exams Card -->
        <div class="col-lg-3 col-md-6">
            <div class="stat-card-modern stat-card-students">
                <div class="stat-card-content">
                    <div class="stat-icon-wrapper">
                        <div class="stat-icon-bg stat-icon-bg-green">
                            <i class="fas fa-check-circle"></i>
                        </div>
                    </div>
                    <div class="stat-info">
                        <div class="stat-number">@Model.Count(e => e.IsActive)</div>
                        <div class="stat-label">ƒêang ho·∫°t ƒë·ªông</div>
                        <div class="stat-description">B√†i ki·ªÉm tra active</div>
                    </div>
                </div>
                <div class="stat-card-footer">
                    <span class="stat-link">Chi ti·∫øt <i class="fas fa-arrow-right ms-1"></i></span>
                </div>
            </div>
        </div>

        <!-- Exam Schedules Card -->
        <div class="col-lg-3 col-md-6">
            <div class="stat-card-modern stat-card-subjects">
                <div class="stat-card-content">
                    <div class="stat-icon-wrapper">
                        <div class="stat-icon-bg stat-icon-bg-orange">
                            <i class="fas fa-calendar"></i>
                        </div>
                    </div>
                    <div class="stat-info">
                        <div class="stat-number">@Model.Sum(e => e.ExamSchedules.Count)</div>
                        <div class="stat-label">L·ªãch thi</div>
                        <div class="stat-description">T·ªïng s·ªë l·ªãch thi</div>
                    </div>
                </div>
                <div class="stat-card-footer">
                    <span class="stat-link">Chi ti·∫øt <i class="fas fa-arrow-right ms-1"></i></span>
                </div>
            </div>
        </div>

        <!-- Inactive Exams Card -->
        <div class="col-lg-3 col-md-6">
            <div class="stat-card-modern stat-card-classes">
                <div class="stat-card-content">
                    <div class="stat-icon-wrapper">
                        <div class="stat-icon-bg stat-icon-bg-purple">
                            <i class="fas fa-pause-circle"></i>
                        </div>
                    </div>
                    <div class="stat-info">
                        <div class="stat-number">@Model.Count(e => !e.IsActive)</div>
                        <div class="stat-label">Kh√¥ng ho·∫°t ƒë·ªông</div>
                        <div class="stat-description">B√†i ki·ªÉm tra inactive</div>
                    </div>
                </div>
                <div class="stat-card-footer">
                    <span class="stat-link">Chi ti·∫øt <i class="fas fa-arrow-right ms-1"></i></span>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .table tbody tr {
        border: none;
        transition: all 0.3s ease;
    }

    .table tbody tr:hover {
        background-color: rgba(168, 230, 207, 0.1) !important;
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .empty-state {
        animation: fadeInUp 0.6s ease-out;
    }

    .empty-state-icon {
        animation: float 3s ease-in-out infinite;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes float {
        0%, 100% {
            transform: translateY(0px);
        }
        50% {
            transform: translateY(-10px);
        }
    }

    .avatar-sm {
        transition: all 0.3s ease;
    }

    .avatar-sm:hover {
        transform: scale(1.05);
    }

    .badge {
        transition: all 0.3s ease;
    }

    .badge:hover {
        transform: scale(1.05);
    }
</style>

@section Scripts {
<script>
    // Enhanced Exams Page Interactions
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize components
        initializeFilters();
        initializeSearch();
        initializeExport();
        initializeAnimations();
    });

    function initializeFilters() {
        const filterBtn = document.getElementById('filterBtn');
        const filterPanel = document.getElementById('filterPanel');
        const applyFilter = document.getElementById('applyFilter');

        if (filterBtn && filterPanel) {
            filterBtn.addEventListener('click', function() {
                if (filterPanel.style.display === 'none' || !filterPanel.style.display) {
                    filterPanel.style.display = 'block';
                    filterPanel.classList.add('animate__animated', 'animate__fadeInDown');
                    this.innerHTML = '<i class="fas fa-times me-2"></i>ƒê√≥ng';
                } else {
                    filterPanel.style.display = 'none';
                    this.innerHTML = '<i class="fas fa-filter me-2"></i>L·ªçc';
                }
            });
        }

        if (applyFilter) {
            applyFilter.addEventListener('click', function() {
                applyFilters();
            });
        }
    }

    function applyFilters() {
        const statusFilter = document.getElementById('statusFilter').value;
        const typeFilter = document.getElementById('typeFilter').value;
        const searchTerm = document.getElementById('examSearch').value.toLowerCase();

        const tableRows = document.querySelectorAll('tbody tr');

        tableRows.forEach(row => {
            let showRow = true;

            // Status filter
            if (statusFilter) {
                const statusBadge = row.querySelector('td:last-child .badge');
                const isActive = statusBadge && statusBadge.textContent.includes('Ho·∫°t ƒë·ªông');
                if ((statusFilter === 'active' && !isActive) ||
                    (statusFilter === 'inactive' && isActive)) {
                    showRow = false;
                }
            }

            // Search filter
            if (searchTerm) {
                const examTitle = row.cells[0].textContent.toLowerCase();
                const examDescription = row.cells[1].textContent.toLowerCase();
                if (!examTitle.includes(searchTerm) && !examDescription.includes(searchTerm)) {
                    showRow = false;
                }
            }

            // Show/hide row
            if (showRow) {
                row.style.display = '';
                row.style.animation = 'fadeIn 0.3s ease-out';
            } else {
                row.style.display = 'none';
            }
        });
    }

    function initializeSearch() {
        const searchInput = document.getElementById('examSearch');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                applyFilters();
            });
        }
    }

    function initializeExport() {
        const exportBtn = document.getElementById('exportBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', function() {
                // Simulate export functionality
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>ƒêang xu·∫•t...';
                this.disabled = true;

                setTimeout(() => {
                    this.innerHTML = '<i class="fas fa-check me-2"></i>ƒê√£ xu·∫•t!';
                    setTimeout(() => {
                        this.innerHTML = '<i class="fas fa-download me-2"></i>Xu·∫•t';
                        this.disabled = false;
                    }, 2000);
                }, 1500);
            });
        }
    }

    function initializeAnimations() {
        // Animate table rows
        const tableRows = document.querySelectorAll('tbody tr');
        tableRows.forEach((row, index) => {
            row.style.animationDelay = (index * 0.05) + 's';
        });

        // Animate stat cards
        const statCards = document.querySelectorAll('.stat-card-modern');
        statCards.forEach((card, index) => {
            card.style.animationDelay = (index * 0.1 + 0.5) + 's';
            card.classList.add('animate__animated', 'animate__fadeInUp');
        });
    }

    // Add CSS animations
    const style = document.createElement('style');
    style.textContent = `
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .animate__fadeInDown {
            animation-duration: 0.5s;
        }
    `;
    document.head.appendChild(style);
</script>
}

